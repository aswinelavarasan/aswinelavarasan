#------------------models.py-------------------------------------------------------------------
class employee_attendance(models.Model):
    employee_attendance_id = models.AutoField(primary_key=True)
    employee_id=models.ForeignKey(Employee,related_name='emp_id',null=True,on_delete=models.CASCADE)
    #employee_code=models.CharField(max_length=200)
    employee_name=models.CharField(max_length=200)
    date=models.DateField()
    check_in_time = models.TimeField(max_length=200)
    check_out_time = models.TimeField(max_length=200)
    



    class Meta:
        db_table = 'employee_attendance'   
        verbose_name_plural='Employee_attendance'
#------------------------admin.py------------------------------------------------------------
from leave_type.models import leave_type,employee_attendance


class EmployeeattendanceAdmin(admin.ModelAdmin):
    list_display= ('employee_id', 'employee_name','date','check_in_time','check_out_time')
    #list_filter=['leavetype_code']

    #class ItemInline(admin.TabularInline):
       # model =employee_leave_allocation
   # inlines =[ItemInline]
      
admin.site.register(employee_attendance,EmployeeattendanceAdmin)

#--------------------------------views.py---------------------------------------------------------------------
from leave_type.models import leave_master,employee_attendance
from django.views.decorators.csrf import csrf_exempt

def Validate_data(data_reader,header):
    response = []
    msg='success '
    is_success = True
    row_cnt = 0
    for row in data_reader:
        row_cnt = row_cnt + 1
        print('row_cnt',row_cnt)
        for col in header:
            # To check empty
            if is_empty(row[col]):
                is_success =  False
                msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"value is empty")
            
            # Check employee
            if col == "employee_code":
                #check upper case
                if is_upper(row[col]):
                    is_success =  False
                    msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"Employee code must be in upper case")
            '''    col == "emp_code" 
                
                exist=fileupload.objects.filter(emp_code=row[col]).exists()
                # print('ha',exist)
                if exist==False:
                   is_success=False
                   msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"Employee is not exist for given employee code")'''
            if col == "employee_name":
                #check upper case
                if is_alpha(row[col]):
                    is_success =  False
                    msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"Employee name must be in valid form")
            if col == "employee_code":
                #check upper case
                if is_alphaa(row[col]):
                    is_success =  False
                    msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"Employee code must be in valid form")
            

            
             
            # Check from date fields
         
           
            
            if col == "check_in_time": 
                
               try:
                  check_in_time = datetime.strptime(row[col],"%H:%M:%S"   )
               except:
                   is_success =  False
                   msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"to time is not valid")  
            
             # Check out time
            if col == "check_out_time":
                time = "%H:%M:%S"
                
                try:
                    check_out_time = datetime.strptime(row[col],  time)
                    
                         
               
                except:
                    is_success =  False
                    msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"to time is not valid")  
            
                
                    
              
            if col == "date":
                    date =  "%Y-%m-%d"
                
                    try:
                        date = datetime.strptime(row[col], date)
                    # print('correct date')
                    except:
                        is_success =  False
                        msg = msg + " row no - {0},colname - {1} ({2}) \n ".format(row_cnt,col,"from date is not valid")  
              

    response.append({"is_success":is_success,"message":msg})
    return response
def isalnum(value):
    
    if value.isalnum() ==True:
       
     print(isalnum,'upper')
    else:
     return isalnum  

#finds uppercase
def is_upper(value):
    is_upper = True
    if value.isupper() ==True:
        is_upper = False
    print(is_upper,'upper')
    return is_upper



def is_alpha(value):
    
    if value.isalpha() ==True:
       
     print(is_alpha,'valid employee name')
    else:
     return is_alpha  

def is_alphaa(value):
    
    if value.isalpha() ==False:
       
     print(is_alpha,'valid employee code')
    else:
     return is_alpha   


    
   



#finds null values
def is_empty(value):
    is_empty = False
    print(value,'res',value==None or value == '')
    if value==None or value.strip() == '':
        is_empty = True

    return is_empty


#finds null values
def is_null(value):
    is_null = False
    print(value,'res',value==None or value == '')
    if value==None or value == '':
        is_null = True
    print(is_null,'null')

    return is_null

    



@csrf_exempt
def employeer_attendance(request):
    # declaring template
    file=request.FILES['file']
    now=datetime.now()
    time = timezone.now()
    print(now,time)

    f_name="{0}_{1}.tsv".format("tmpupload",now.strftime("%Y-%m-%d_%H_%M_%S"))
    print(f_name,'time')
    file_name = default_storage.save(f_name,file)
    print(file_name,'name')
    # abs_path=os.path.abspath(os.path.dirname(file_name))
    # print('abs',abs_path)
    settings_dir = os.path.dirname(__file__)
    print('settings',settings_dir)
    PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))
    print('data',PROJECT_ROOT)
    XMLFILES_FOLDER = os.path.join(PROJECT_ROOT, 'files')
    print('xml',XMLFILES_FOLDER)
    file_path=os.path.join(XMLFILES_FOLDER,file_name)
    print('os',file_path)
    # path=os.path.realpath(file_name)
    # print('path',path)
    # file_path=MEDIA_URL+file_name
    # dir_file=abs_path+file_path
    # print('path',dir_file)
    #header_list=['date','check_in_time','check_out_time','employee_id','employee_name']
    header_list=['employee_id','employee_name','date','check_in_time','check_out_time']



    with open(file_path,newline='') as _file:
        # consist of entire rows and columns 
        data_reader=csv.reader(_file,delimiter='\t')
        # get header from datareader
        tsv_header=next(data_reader)
        print(tsv_header)
        print(header_list)
        # check tsv and list header
        if header_list == tsv_header:
            print('true')
            # consist of entire rows and columns by passing header list
            data_reader=csv.DictReader(_file,delimiter='\t',fieldnames=(header_list))
            resp = Validate_data(data_reader,header_list)
            df_import = pd.read_csv(file_path,delimiter='\t')
            print(df_import)
           
            #ddf = dd.from_pandas(df_import, npartitions=1)
           # df_dask = dd.from_pandas(df_pandas, npartitions=10)
            
            print(len(df_import))

            #get the databse configuration            
            res=resp[0]
            if res['is_success']==True:

                print(res,'response')
                user=settings.DATABASES['default']['USER']
                print(user,'user')
                pwd=settings.DATABASES['default']['PASSWORD']
                host=settings.DATABASES['default']['HOST']
                dbname=settings.DATABASES['default']['NAME']
                print(dbname,'name')
                port=settings.DATABASES['default']['PORT']

                db_url='mysql+mysqldb://{username}:{password}@{hostname}:{port}/{db_name}'.format(username=user,password=pwd,hostname=host,port=port,db_name=dbname)
                print(db_url)

                engine = sa.create_engine(db_url)
                print('engine suucess')

               
                row_cnt = 0
               
                #row_cnt = row_cnt + 1

                for index, row in df_import.iterrows():
                    row_cnt = row_cnt + 1
                    lv=employee_attendance(employee_id_=row.employee_id,employee_name=row.employee_name,date=row.date,check_in_time=row.check_in_time,check_out_time=row.check_out_time)
                    
                    lv.save()
                    print(lv)

            return JsonResponse(resp,safe=False) 